
###################################################
# PROJE: Rating Product & Sorting Reviews in Amazon
###################################################

###################################################
# İş Problemi
###################################################

# E-ticaretteki en önemli problemlerden bir tanesi ürünlere satış sonrası verilen puanların doğru şekilde hesaplanmasıdır.
# Bu problemin çözümü e-ticaret sitesi için daha fazla müşteri memnuniyeti sağlamak, satıcılar için ürünün öne çıkması ve satın
# alanlar için sorunsuz bir alışveriş deneyimi demektir. Bir diğer problem ise ürünlere verilen yorumların doğru bir şekilde sıralanması
# olarak karşımıza çıkmaktadır. Yanıltıcı yorumların öne çıkması ürünün satışını doğrudan etkileyeceğinden dolayı hem maddi kayıp
# hem de müşteri kaybına neden olacaktır. Bu 2 temel problemin çözümünde e-ticaret sitesi ve satıcılar satışlarını arttırırken müşteriler
# ise satın alma yolculuğunu sorunsuz olarak tamamlayacaktır.

###################################################
# Veri Seti Hikayesi
###################################################

# Amazon ürün verilerini içeren bu veri seti ürün kategorileri ile çeşitli metadataları içermektedir.
# Elektronik kategorisindeki en fazla yorum alan ürünün kullanıcı puanları ve yorumları vardır.

# Değişkenler:
# reviewerID: Kullanıcı ID’si
# asin: Ürün ID’si
# reviewerName: Kullanıcı Adı
# helpful: Faydalı değerlendirme derecesi
# reviewText: Değerlendirme
# overall: Ürün rating’i
# summary: Değerlendirme özeti
# unixReviewTime: Değerlendirme zamanı
# reviewTime: Değerlendirme zamanı Raw
# day_diff: Değerlendirmeden itibaren geçen gün sayısı
# helpful_yes: Değerlendirmenin faydalı bulunma sayısı
# total_vote: Değerlendirmeye verilen oy sayısı



###################################################
# GÖREV 1: Average Rating'i Güncel Yorumlara Göre Hesaplayınız ve Var Olan Average Rating ile Kıyaslayınız.
###################################################

# Paylaşılan veri setinde kullanıcılar bir ürüne puanlar vermiş ve yorumlar yapmıştır.
# Bu görevde amacımız verilen puanları tarihe göre ağırlıklandırarak değerlendirmek.
# İlk ortalama puan ile elde edilecek tarihe göre ağırlıklı puanın karşılaştırılması gerekmektedir.


###################################################
# Adım 1: Veri Setini Okutunuz ve Ürünün Ortalama Puanını Hesaplayınız.
###################################################
import pandas as pd
import math
import scipy.stats as st

pd.set_option('display.max_columns', None)
pd.set_option('display.expand_frame_repr', False)
pd.set_option('display.float_format', lambda x: '%.5f' % x)

df = pd.read_csv('datasets/amazon_review.csv')
df.head()
df['overall'].mean()
###################################################
# Adım 2: Tarihe Göre Ağırlıklı Puan Ortalamasını Hesaplayınız.
###################################################
df.info()
# object olan değişkeni datetime cevir:

df["reviewTime"] = pd.to_datetime(df["reviewTime"])
df['reviewTime'].max()

df['unixReviewTime'].min()

# Yapılan yorumları tek tip ve gün olarak belirleyelim:
current_date = pd.to_datetime('2014-12-09 0:0:0')
df['day_diff'].min()

# dt.days gun cinsinden ifade etmemize yarar
df["days"] = (current_date - df["reviewTime"]).dt.days

# 1 day = 86400 Seconds unix time
df['unix_days'] = df['unixReviewTime'] / 86400
df['unix_days'].min()

# Son 30 gunde yapılan yorumlara bakalım:
df[df['days'] <= 30]
df[df['day_diff'] <= 30]
# Son 30 gunde yapılan yorumların ortalamasına bakalım:
df.loc[df["days"] <= 30, "overall"].mean()
df.loc[df['day_diff'] <= 30, 'overall'].mean()

df.loc[(df["days"] > 30) & (df["days"] <= 90), "overall"].mean()

df.loc[(df["days"] > 90) & (df["days"] <= 180), "overall"].mean()

df.loc[(df["days"] > 180), "overall"].mean()

# Zamanın etkisini ağırlığık katsayısına eşitleyelim.
# 30 gunden az olanları %30, 30-90 olanı daha az %40, %15 ve %15 olarak belirleyelim. Bize bağlı bu katsayılar
df.loc[df["days"] <= 30, "overall"].mean() * 30/100 + \
    df.loc[(df["days"] > 30) & (df["days"] <= 90), "overall"].mean() * 40/100 + \
    df.loc[(df["days"] > 90) & (df["days"] <= 180), "overall"].mean() * 15/100 + \
    df.loc[(df["days"] > 180), "overall"].mean() * 15/100

# Sonuc: 4.69  Ağırlıklı ortalama ile bu rakamı elde ettik.
# Daha pratik bir fonksiyon yazalım:

def time_based_weighted_average(dataframe, w1=50, w2=25, w3=15, w4=10):
    return dataframe.loc[dataframe["day_diff"] <= dataframe["day_diff"].quantile(0.25), "overall"].mean() * w1 / 100 + \
           dataframe.loc[(dataframe["day_diff"] > dataframe["day_diff"].quantile(0.25)) &
                         (dataframe["day_diff"] <= dataframe["day_diff"].quantile(0.50)), "overall"].mean() * w2 / 100 + \
           dataframe.loc[(dataframe["day_diff"] > dataframe["day_diff"].quantile(0.50)) &
                         (dataframe["day_diff"] <= dataframe["day_diff"].quantile(0.75)), "overall"].mean() * w3 / 100 + \
           dataframe.loc[(dataframe["day_diff"] > dataframe["day_diff"].quantile(0.75)), "overall"].mean() * w4 / 100


time_based_weighted_average(df)

# Ağırlıkları değiştirip inceleyelim:

###################################################
# Görev 2: Ürün için Ürün Detay Sayfasında Görüntülenecek 20 Review'i Belirleyiniz.
###################################################
df.head()

###################################################
# Adım 1. helpful_no Değişkenini Üretiniz
###################################################

# Not:
# total_vote bir yoruma verilen toplam up-down sayısıdır.
# up, helpful demektir.
# veri setinde helpful_no değişkeni yoktur, var olan değişkenler üzerinden üretilmesi gerekmektedir.
df['helpful']
df['helpful_no'] = df['total_vote'] - df['helpful_yes']
df['helpful_yes'].sum()
df['helpful_no'].sum()
###################################################
# Adım 2. score_pos_neg_diff, score_average_rating ve wilson_lower_bound Skorlarını Hesaplayıp Veriye Ekleyiniz
###################################################
# Pos_Neg_Diff_Score = (helful yes) − (helpful no)

def score_pos_neg_diff(pos, neg):
    return pos - neg

score_pos_neg_diff(df['helpful_yes'].sum(), df['helpful_no'].sum())

# Score_Average_Rating = (up ratings) / (all ratings)

def score_average_rating(pos, neg):
    if pos + neg == 0:
        return 0
    return pos / (pos + neg)

score_average_rating(df['helpful_yes'].sum(), df['helpful_no'].sum())

# Wilson Lower Bound Score

def wilson_lower_bound(pos, neg, confidence=0.95):
    """
    Wilson Lower Bound Score hesapla

    - Bernoulli parametresi p için hesaplanacak güven aralığının alt sınırı WLB skoru olarak kabul edilir.
    - Hesaplanacak skor ürün sıralaması için kullanılır.
    - Not:
    Eğer skorlar 1-5 arasıdaysa 1-3 negatif, 4-5 pozitif olarak işaretlenir ve bernoulli'ye uygun hale getirilebilir.
    Bu beraberinde bazı problemleri de getirir. Bu sebeple bayesian average rating yapmak gerekir.

    Parameters
    ----------
    pos: int
        pos count
    neg: int
        neg count
    confidence: float
        confidence

    Returns
    -------
    wilson score: float

    """
    n = pos + neg
    if n == 0:
        return 0
    z = st.norm.ppf(1 - (1 - confidence) / 2)
    phat = 1.0 * pos / n
    return (phat + z * z / (2 * n) - z * math.sqrt((phat * (1 - phat) + z * z / (4 * n)) / n)) / (1 + z * z / n)

wilson_lower_bound(df['helpful_yes'].sum(), df['helpful_no'].sum())

##################################################
# Adım 3. 20 Yorumu Belirleyiniz ve Sonuçları Yorumlayınız.
###################################################
comments = pd.DataFrame({"helpful_yes": df['helpful_yes'], "helpful_no": df['helpful_no']})

# score_pos_neg_diff
comments["score_pos_neg_diff"] = comments.apply(lambda x: score_pos_neg_diff(x["helpful_yes"],
                                                                             x["helpful_no"]), axis=1)

# score_average_rating
comments["score_average_rating"] = comments.apply(lambda x: score_average_rating(x["helpful_yes"],
                                                                                 x["helpful_no"]), axis=1)

# wilson_lower_bound
comments["wilson_lower_bound"] = comments.apply(lambda x: wilson_lower_bound(x["helpful_yes"],
                                                                             x["helpful_no"]), axis=1)

comments.sort_values('wilson_lower_bound', ascending=False)[0:20].reset_index()
